name: Build and Push Docker Image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: winterfellhub/winterfell-server
  DOCKERFILE_PATH: ./apps/server/Dockerfile
  BUILD_CONTEXT: .

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Node
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-,enable={{is_default_branch}}
            type=sha,prefix=pr-,enable=${{ github.event_name == 'pull_request' }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            # Navigate to app directory
            cd /home/${{ secrets.EC2_USERNAME }}/app || mkdir -p /home/${{ secrets.EC2_USERNAME }}/app && cd /home/${{ secrets.EC2_USERNAME }}/app

            # Pull the latest image
            docker pull winterfellhub/winterfell-server:latest

            # Stop and remove old container
            docker stop winterfell-server || true
            docker rm winterfell-server || true

            # Run the new container with env file
            docker run -d \
              --name winterfell-server \
              --restart unless-stopped \
              -p 8787:8787 \
              --env-file /home/${{ secrets.EC2_USERNAME }}/app/.env.production \
              winterfellhub/winterfell-server:latest

            # Wait for container to start
            sleep 5

            # Generate Prisma Client in the database package
            docker exec winterfell-server sh -c "cd /app/packages/database && npx prisma generate"

            # Run Prisma migrations
            docker exec winterfell-server sh -c "cd /app/packages/database && npx prisma migrate deploy"

            # Clean up old images
            docker image prune -af --filter "until=24h"

            # Show container logs (last 20 lines)
            echo "=== Container Logs ==="
            docker logs --tail 20 winterfell-server

            # Show container status
            echo "=== Container Status ==="
            docker ps | grep winterfell-server
