datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  password  String? // if using credentials login
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription Subscription?
  contracts    Contract[]
  chats        Chat[]
}

model Contract {
  id           String       @id @default(cuid())
  title        String
  description  String?
  contractType ContractType

  code String

  idl       Json? // auto-generated IDL
  clientSdk Json? // auto-generated client (TS/JS)

  summary String? // AI-generated human-readable summary

  deployed  Boolean  @default(false)
  programId String? // Solana program ID after deployment
  version   Int      @default(1)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deployments Deployment[]
  chats       Chat[]
}

model Deployment {
  id          String   @id @default(cuid())
  contract    Contract @relation(fields: [contractId], references: [id])
  contractId  String
  network     String // devnet/testnet/mainnet
  deployedAt  DateTime @default(now())
  txSignature String? // optional Solana transaction signature
  status      String // pending/success/failure

  @@index([contractId])
}

model Chat {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([userId])
  @@index([contractId])
}

model Message {
  id     String @id @default(cuid())
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  role    ChatRole
  content String   @db.Text

  createdAt DateTime @default(now())

  @@index([chatId])
}

model Subscription {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  plan   PlatType           @default(FREE)
  status SubscriptionStatus @default(ACTIVE)

  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?

  start     DateTime  @default(now())
  end       DateTime?
  autoRenew Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ContractType {
  TOKEN
  NFT
  STAKING
  DAO
  DEFI
  MARKETPLACE
  CUSTOM
}

enum Network {
  DEVNET
  TESTNET
  MAINNET_BETA
}

enum DeploymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ChatRole {
  USER
  AI
  SYSTEM
}

enum PlatType {
  FREE
  PREMIUM
  PREMIUM_PLUS
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}
